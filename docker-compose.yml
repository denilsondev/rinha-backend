services:
  migrations:
    build:
      context: . # Diretório raiz do projeto
      dockerfile: ./Dockerfile
      target: migrations
    container_name: migrations
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      - ConnectionStrings__DefaultConnection=Server=db;Database=api_db;User=root;Password=mysqlpassword
    depends_on:
      - db
    working_dir: /src
    entrypoint: ["dotnet", "ef", "database", "update", "--project", "RinhaDeBackend.Infrastructure/RinhaDeBackend.Infrastructure.csproj", "--startup-project", "RinhaDeBackend/RinhaDeBackend.API.csproj"]


  api1:
    build:
      context: . # Aponta para o diretório raiz do projeto
      dockerfile: ./Dockerfile # Dockerfile na subpasta
      target: runtime # Usa o estágio "runtime" no Dockerfile
    container_name: api1
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      - ConnectionStrings__DefaultConnection=Server=db;Database=api_db;User=root;Password=mysqlpassword
    depends_on:
      - db
    ports:
      - "5001:8080"

  api2:
    build:
      context: . # Aponta para o diretório raiz do projeto
      dockerfile: ./Dockerfile # Dockerfile na subpasta
      target: runtime # Usa o estágio "runtime" no Dockerfile
    container_name: api2
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      - ConnectionStrings__DefaultConnection=Server=db;Database=api_db;User=root;Password=mysqlpassword
    depends_on:
      - db
    ports:
      - "5002:8080"

  db:
    image: mysql:8
    container_name: db
    environment:
      MYSQL_ROOT_PASSWORD: mysqlpassword
      MYSQL_DATABASE: api_db
    volumes:
      - mysqldata:/var/lib/mysql

  nginx:
    image: nginx:latest
    container_name: nginx
    ports:
      - "9999:9999"
    depends_on:
      - api1
      - api2
    volumes:
      - ./RinhaDeBackend/nginx.conf:/etc/nginx/nginx.conf:ro  

volumes:
  mysqldata:
